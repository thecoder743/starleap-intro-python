######################################################################
Homework 1 - Written Exercises

### Instructions ###
Type your answers directly into this file.

######################################################################

######################################################################
# Exercise 1.9 – Variable Names
The Python interpreter has strict rules for variable names. Which of the following are legal Python names? If the name is not legal, state the reason.  If you're not sure, try it in the interactive python interpreter.

1. and

2. _and

3. var

4. var1

5. 1var

6. my-name

7. your_name

8. COLOR


######################################################################
# Exercise 1.10 – Types
It is important that we know the type of the values stored in a variable so that we can use the correct operators (as we have already seen!). Python automatically infers the type from the value you assign to the variable. Write down the type of the values stored in each of the variables below. Pay special attention to punctuation: values are not always the type they seem!

1. a = False

2. b=3.7

3. c = ’Alex’

4. d = 7

5. e = ’True’

6. f = 17

7. g = ’17’

8. h = True

9. i = ’3.14159’


To verify your answers, you can use the interactive Python shell, but first try to do the exercise without help.
>>> x = 100
>>> type(x)
<type ’int’>
>>>

######################################################################
# Exercise 1.11 – Natural Language Processing
Consider the following sentence:
Alice saw the boy on the hill with the telescope.

1. What is unclear about this sentence?


2. Write the sentence in two different ways, that clarifies both possible meanings of the sentence (hint: rewrite the sentence using extra words, commas, etc).


3. The ambiguity illustrated by this sentence is known as “prepositional phrase attachment.” Think about this as you continue to learn how to program, and consider how programming languages are designed to avoid the ambiguity illustrated by this example!


######################################################################
# Exercise 1.12 – Boolean operators
Boolean operators can seem tricky at first, and it takes practice to evaluate them correctly. Write the value (True
or False) produced by each expession below, using the assigned values of the variables a, b, and c. Try to do this
without using your interpreter, but you should check yourself when you think you’ve got it. Hint: Work from the
inside out, starting with the inner-most expressions, like in arithmetic.

    a = False
    b = True
    c = False

1. b and c

2. b or c

3. not a and b

4. (a and b) or not c

5. not b and not (a or c)


######################################################################
# Exercise 1.13 – Conditionals
The purpose of this exercise is to understand conditionals. Tiberius is looking for his dream job, but has some
restrictions. He loves California and would take a job there if it paid over 40,000 a year. He hates Massachusetts
and demands at least 100,000 to work there. Any other place he’s content to work for 60,000 a year, unless he can
work in space in which case he would work for free. The following code shows his basic strategy for evaluating a
job offer.

pay = _____
location = _____

if location == "U.S.S. Enterprise":"
    print "So long, suckers! I’ll take it!"
elif location == "Massachusetts":
    if pay < 100000:
        print "No way"
    else:
        print "I’ll take it!"
elif location == "California" and pay > 40000:
    print "I’ll take it!"
elif pay > 60000:
    print "I’ll take it!"
else:
    print "No thanks, I can find something better."

For each of the following job offers, write down the output that would be generated. Do this without running the
code. It is an important skill to be able to understand what a piece of code does without running it.

1. location = "Massachusetts", pay = 50000


2. location = "Iowa", pay = 50000


3. location = "California", pay = 50000


4. location = "U.S.S. Enterprise", pay = 1


5. location = "California", pay = 25000


